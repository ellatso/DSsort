#pragma once
#include "MyForm.h"
#include <queue>       // 用於 BFS 搜尋
#include <stack>       // 用於 DFS 搜尋
#include <vector>      // 用於存儲方向
#include <iostream>    // 用於輸出除錯資訊
#include <cstdlib>     // 用於亂數
#include <ctime>       // 用於時間種子
#include <Windows.h>   // 用於 Sleep() (如果有動畫延遲)


namespace DSmousemaze {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::Collections::Generic;


	/// <summary>
	/// MyForm 的摘要
	/// </summary>
	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
			//TODO:  在此加入建構函式程式碼
			//
			//InitializeTimer();
		}

	protected:
		/// <summary>
		/// 清除任何使用中的資源。
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::ComponentModel::BackgroundWorker^ backgroundWorker1;
	protected:
	private: System::ComponentModel::BackgroundWorker^ backgroundWorker2;
	private: System::Windows::Forms::TabControl^ tabControl1;

	private: System::Windows::Forms::TabPage^ tabPage2;
	private: System::Windows::Forms::TabPage^ tabPage1;
	private: System::Windows::Forms::GroupBox^ groupBox1;
	private: System::Windows::Forms::GroupBox^ groupBox2;
	private: System::Windows::Forms::TextBox^ textBox3;
	private: System::Windows::Forms::TextBox^ textBox4;
	private: System::Windows::Forms::Label^ label4;
	private: System::Windows::Forms::Label^ label5;
	private: System::Windows::Forms::TextBox^ textBox2;
	private: System::Windows::Forms::TextBox^ textBox1;
	private: System::Windows::Forms::Label^ label2;
	private: System::Windows::Forms::Label^ label1;
	private: System::Windows::Forms::Label^ label3;
	private: System::Windows::Forms::GroupBox^ groupBox3;
	private: System::Windows::Forms::Button^ button2;
	private: System::Windows::Forms::Button^ button1;
	private: System::Windows::Forms::DataGridView^ dataGridView1;
	private: System::Windows::Forms::TrackBar^ trackBar1;
	private: System::Windows::Forms::Label^ label6;
	private: System::Windows::Forms::Button^ button3;
	private: System::Windows::Forms::Button^ button4;

	private: System::Windows::Forms::Button^ button6;
	private: System::Windows::Forms::RichTextBox^ richTextBox1;
	






	private:
		/// <summary>
		/// 設計工具所需的變數。
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// 此為設計工具支援所需的方法 - 請勿使用程式碼編輯器修改
		/// 這個方法的內容。
		/// </summary>
		void InitializeComponent(void)
		{
			this->backgroundWorker1 = (gcnew System::ComponentModel::BackgroundWorker());
			this->backgroundWorker2 = (gcnew System::ComponentModel::BackgroundWorker());
			this->tabControl1 = (gcnew System::Windows::Forms::TabControl());
			this->tabPage1 = (gcnew System::Windows::Forms::TabPage());
			this->richTextBox1 = (gcnew System::Windows::Forms::RichTextBox());
			this->tabPage2 = (gcnew System::Windows::Forms::TabPage());
			this->dataGridView1 = (gcnew System::Windows::Forms::DataGridView());
			this->groupBox1 = (gcnew System::Windows::Forms::GroupBox());
			this->textBox2 = (gcnew System::Windows::Forms::TextBox());
			this->textBox1 = (gcnew System::Windows::Forms::TextBox());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->label3 = (gcnew System::Windows::Forms::Label());
			this->groupBox2 = (gcnew System::Windows::Forms::GroupBox());
			this->textBox3 = (gcnew System::Windows::Forms::TextBox());
			this->textBox4 = (gcnew System::Windows::Forms::TextBox());
			this->label4 = (gcnew System::Windows::Forms::Label());
			this->label5 = (gcnew System::Windows::Forms::Label());
			this->groupBox3 = (gcnew System::Windows::Forms::GroupBox());
			this->label6 = (gcnew System::Windows::Forms::Label());
			this->trackBar1 = (gcnew System::Windows::Forms::TrackBar());
			this->button2 = (gcnew System::Windows::Forms::Button());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->button3 = (gcnew System::Windows::Forms::Button());
			this->button4 = (gcnew System::Windows::Forms::Button());
			this->button6 = (gcnew System::Windows::Forms::Button());
			this->tabControl1->SuspendLayout();
			this->tabPage1->SuspendLayout();
			this->tabPage2->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->dataGridView1))->BeginInit();
			this->groupBox1->SuspendLayout();
			this->groupBox2->SuspendLayout();
			this->groupBox3->SuspendLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->trackBar1))->BeginInit();
			this->SuspendLayout();
			// 
			// tabControl1
			// 
			this->tabControl1->Controls->Add(this->tabPage1);
			this->tabControl1->Controls->Add(this->tabPage2);
			this->tabControl1->Location = System::Drawing::Point(315, 79);
			this->tabControl1->Name = L"tabControl1";
			this->tabControl1->SelectedIndex = 0;
			this->tabControl1->Size = System::Drawing::Size(773, 560);
			this->tabControl1->TabIndex = 0;
			// 
			// tabPage1
			// 
			this->tabPage1->Controls->Add(this->richTextBox1);
			this->tabPage1->Location = System::Drawing::Point(4, 28);
			this->tabPage1->Name = L"tabPage1";
			this->tabPage1->Padding = System::Windows::Forms::Padding(3);
			this->tabPage1->Size = System::Drawing::Size(765, 528);
			this->tabPage1->TabIndex = 0;
			this->tabPage1->Text = L"memo";
			this->tabPage1->UseVisualStyleBackColor = true;
			this->tabPage1->Click += gcnew System::EventHandler(this, &MyForm::tabPage1_Click);
			// 
			// richTextBox1
			// 
			this->richTextBox1->Location = System::Drawing::Point(12, 12);
			this->richTextBox1->Name = L"richTextBox1";
			this->richTextBox1->Size = System::Drawing::Size(747, 492);
			this->richTextBox1->TabIndex = 0;
			this->richTextBox1->Text = L"";
			// 
			// tabPage2
			// 
			this->tabPage2->Controls->Add(this->dataGridView1);
			this->tabPage2->Location = System::Drawing::Point(4, 28);
			this->tabPage2->Name = L"tabPage2";
			this->tabPage2->Padding = System::Windows::Forms::Padding(3);
			this->tabPage2->Size = System::Drawing::Size(765, 528);
			this->tabPage2->TabIndex = 1;
			this->tabPage2->Text = L"mouse";
			this->tabPage2->UseVisualStyleBackColor = true;
			// 
			// dataGridView1
			// 
			this->dataGridView1->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
			this->dataGridView1->Location = System::Drawing::Point(8, 6);
			this->dataGridView1->Name = L"dataGridView1";
			this->dataGridView1->RowHeadersWidth = 62;
			this->dataGridView1->RowTemplate->Height = 31;
			this->dataGridView1->Size = System::Drawing::Size(735, 503);
			this->dataGridView1->TabIndex = 0;
			// 
			// groupBox1
			// 
			this->groupBox1->Controls->Add(this->textBox2);
			this->groupBox1->Controls->Add(this->textBox1);
			this->groupBox1->Controls->Add(this->label2);
			this->groupBox1->Controls->Add(this->label1);
			this->groupBox1->Location = System::Drawing::Point(12, 12);
			this->groupBox1->Name = L"groupBox1";
			this->groupBox1->Size = System::Drawing::Size(287, 130);
			this->groupBox1->TabIndex = 1;
			this->groupBox1->TabStop = false;
			this->groupBox1->Text = L"size";
			// 
			// textBox2
			// 
			this->textBox2->Location = System::Drawing::Point(108, 78);
			this->textBox2->Name = L"textBox2";
			this->textBox2->Size = System::Drawing::Size(144, 29);
			this->textBox2->TabIndex = 3;
			this->textBox2->Text = L"11";
			// 
			// textBox1
			// 
			this->textBox1->Location = System::Drawing::Point(108, 32);
			this->textBox1->Name = L"textBox1";
			this->textBox1->Size = System::Drawing::Size(144, 29);
			this->textBox1->TabIndex = 2;
			this->textBox1->Text = L"11";
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Location = System::Drawing::Point(28, 81);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(70, 18);
			this->label2->TabIndex = 1;
			this->label2->Text = L"Width = ";
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Location = System::Drawing::Point(28, 43);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(74, 18);
			this->label1->TabIndex = 0;
			this->label1->Text = L"Height = ";
			// 
			// label3
			// 
			this->label3->AutoSize = true;
			this->label3->Location = System::Drawing::Point(365, 214);
			this->label3->Name = L"label3";
			this->label3->Size = System::Drawing::Size(0, 18);
			this->label3->TabIndex = 2;
			// 
			// groupBox2
			// 
			this->groupBox2->Controls->Add(this->textBox3);
			this->groupBox2->Controls->Add(this->textBox4);
			this->groupBox2->Controls->Add(this->label4);
			this->groupBox2->Controls->Add(this->label5);
			this->groupBox2->Location = System::Drawing::Point(12, 148);
			this->groupBox2->Name = L"groupBox2";
			this->groupBox2->Size = System::Drawing::Size(287, 130);
			this->groupBox2->TabIndex = 4;
			this->groupBox2->TabStop = false;
			this->groupBox2->Text = L"In-Out";
			// 
			// textBox3
			// 
			this->textBox3->Location = System::Drawing::Point(117, 78);
			this->textBox3->Name = L"textBox3";
			this->textBox3->Size = System::Drawing::Size(144, 29);
			this->textBox3->TabIndex = 3;
			this->textBox3->Text = L"9,10";
			// 
			// textBox4
			// 
			this->textBox4->Location = System::Drawing::Point(117, 32);
			this->textBox4->Name = L"textBox4";
			this->textBox4->Size = System::Drawing::Size(144, 29);
			this->textBox4->TabIndex = 2;
			this->textBox4->Text = L"0,1";
			// 
			// label4
			// 
			this->label4->AutoSize = true;
			this->label4->Location = System::Drawing::Point(28, 81);
			this->label4->Name = L"label4";
			this->label4->Size = System::Drawing::Size(56, 18);
			this->label4->TabIndex = 1;
			this->label4->Text = L"Exit = ";
			// 
			// label5
			// 
			this->label5->AutoSize = true;
			this->label5->Location = System::Drawing::Point(28, 43);
			this->label5->Name = L"label5";
			this->label5->Size = System::Drawing::Size(89, 18);
			this->label5->TabIndex = 0;
			this->label5->Text = L"Entrance = ";
			// 
			// groupBox3
			// 
			this->groupBox3->Controls->Add(this->label6);
			this->groupBox3->Controls->Add(this->trackBar1);
			this->groupBox3->Controls->Add(this->button2);
			this->groupBox3->Controls->Add(this->button1);
			this->groupBox3->Location = System::Drawing::Point(12, 284);
			this->groupBox3->Name = L"groupBox3";
			this->groupBox3->Size = System::Drawing::Size(287, 173);
			this->groupBox3->TabIndex = 5;
			this->groupBox3->TabStop = false;
			this->groupBox3->Text = L"Auto";
			// 
			// label6
			// 
			this->label6->AutoSize = true;
			this->label6->Location = System::Drawing::Point(17, 93);
			this->label6->Name = L"label6";
			this->label6->Size = System::Drawing::Size(67, 18);
			this->label6->TabIndex = 3;
			this->label6->Text = L"speed = ";
			// 
			// trackBar1
			// 
			this->trackBar1->Location = System::Drawing::Point(72, 93);
			this->trackBar1->Name = L"trackBar1";
			this->trackBar1->Size = System::Drawing::Size(200, 69);
			this->trackBar1->TabIndex = 2;
			this->trackBar1->Scroll += gcnew System::EventHandler(this, &MyForm::trackBar1_Scroll);
			// 
			// button2
			// 
			this->button2->Location = System::Drawing::Point(123, 28);
			this->button2->Name = L"button2";
			this->button2->Size = System::Drawing::Size(149, 49);
			this->button2->TabIndex = 1;
			this->button2->Text = L"Find a New Tour";
			this->button2->UseVisualStyleBackColor = true;
			this->button2->Click += gcnew System::EventHandler(this, &MyForm::button2_Click);
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(13, 28);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(104, 49);
			this->button1->TabIndex = 0;
			this->button1->Text = L"Find a Tour";
			this->button1->UseVisualStyleBackColor = true;
			this->button1->Click += gcnew System::EventHandler(this, &MyForm::button1_Click);
			// 
			// button3
			// 
			this->button3->Location = System::Drawing::Point(154, 473);
			this->button3->Name = L"button3";
			this->button3->Size = System::Drawing::Size(145, 51);
			this->button3->TabIndex = 6;
			this->button3->Text = L"Save maze";
			this->button3->UseVisualStyleBackColor = true;
			this->button3->Click += gcnew System::EventHandler(this, &MyForm::button3_Click);
			// 
			// button4
			// 
			this->button4->Location = System::Drawing::Point(12, 473);
			this->button4->Name = L"button4";
			this->button4->Size = System::Drawing::Size(136, 51);
			this->button4->TabIndex = 7;
			this->button4->Text = L"Load maze";
			this->button4->UseVisualStyleBackColor = true;
			this->button4->Click += gcnew System::EventHandler(this, &MyForm::button4_Click);
			// 
			// button6
			// 
			this->button6->Location = System::Drawing::Point(331, 25);
			this->button6->Name = L"button6";
			this->button6->Size = System::Drawing::Size(251, 48);
			this->button6->TabIndex = 9;
			this->button6->Text = L"Generate maze";
			this->button6->UseVisualStyleBackColor = true;
			this->button6->Click += gcnew System::EventHandler(this, &MyForm::button6_Click);

			// 
			// MyForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(9, 18);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(1100, 651);
			this->Controls->Add(this->button6);
			this->Controls->Add(this->button4);
			this->Controls->Add(this->button3);
			this->Controls->Add(this->groupBox3);
			this->Controls->Add(this->groupBox2);
			this->Controls->Add(this->label3);
			this->Controls->Add(this->groupBox1);
			this->Controls->Add(this->tabControl1);
			this->Name = L"MyForm";
			this->Text = L"MyForm";
			//this->Load += gcnew System::EventHandler(this, &MyForm::MyForm_Load);
			this->tabControl1->ResumeLayout(false);
			this->tabPage1->ResumeLayout(false);
			this->tabPage2->ResumeLayout(false);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->dataGridView1))->EndInit();
			this->groupBox1->ResumeLayout(false);
			this->groupBox1->PerformLayout();
			this->groupBox2->ResumeLayout(false);
			this->groupBox2->PerformLayout();
			this->groupBox3->ResumeLayout(false);
			this->groupBox3->PerformLayout();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->trackBar1))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}

#pragma endregion
private: System::Void tabPage1_Click(System::Object^ sender, System::EventArgs^ e) {
}
//private:
	String^ originalMazeText;
	int currentFileIndex = 0;
	int animationSpeed = 5; // Default speed

	// =======按鈕 ==========

private: System::Void button1_Click(System::Object^ sender, System::EventArgs^ e) {
	SolveMazeUsingBacktracking();
}

private: System::Void button2_Click(System::Object^ sender, System::EventArgs^ e) {
	SolveMazeUsingRandomWalk();
}

private: System::Void button3_Click(System::Object^ sender, System::EventArgs^ e) {
	Save();
}

private: System::Void button4_Click(System::Object^ sender, System::EventArgs^ e) {
	Load();
}

private: System::Void button6_Click(System::Object^ sender, System::EventArgs^ e) {
	// Generate new maze using Prim's algorithm
	GenerateNewMaze();
}

private: System::Void trackBar1_Scroll(System::Object^ sender, System::EventArgs^ e) {
	animationSpeed = trackBar1->Value;
}

	   // ====================solve1sove2按鈕功能 ====================

private: void SolveMazeUsingBacktracking() {
	originalMazeText = richTextBox1->Text;
	MazeInfo^ mazeInfo = ParseMazeFromText(richTextBox1->Text);

	if (!mazeInfo->IsValid) {
		richTextBox1->AppendText("\n無效的迷宮格式！");
		return;
	}
	// 初始化mouse
	InitializeGrid(mazeInfo->Height, mazeInfo->Width);

	//顯示路徑 (0=沒去過, 1=去過, 2=路)
	array<array<int>^>^ solution = CreateEmptySolutionArray(mazeInfo->Height, mazeInfo->Width);

	//演算法
	bool solved = SolveMazeWithBacktracking(mazeInfo->Maze, solution,mazeInfo->EntranceX, mazeInfo->EntranceY,mazeInfo->ExitX, mazeInfo->ExitY);

	// 顯示結果
	DisplaySolutionInTextBox(solved, mazeInfo->Maze, solution,mazeInfo->Height, mazeInfo->Width,mazeInfo->EntranceX, mazeInfo->EntranceY,mazeInfo->ExitX, mazeInfo->ExitY);
}

private: void SolveMazeUsingRandomWalk() {
	richTextBox1->Clear();//reset
	richTextBox1->Text = originalMazeText;
	MazeInfo^ mazeInfo = ParseMazeFromText(richTextBox1->Text);

	if (!mazeInfo->IsValid) {
		richTextBox1->AppendText("\n無效的迷宮格式！");
		return;
	}
	//顯示路徑 (0=沒去過, 1=去過, 2=路)
	array<array<int>^>^ solution = CreateEmptySolutionArray(mazeInfo->Height, mazeInfo->Width);

	//演算法
	bool solved = SolveWithRandomWalk(mazeInfo->Maze, solution,mazeInfo->EntranceX, mazeInfo->EntranceY,mazeInfo->ExitX, mazeInfo->ExitY,mazeInfo->Height, mazeInfo->Width);

	// 顯示結果
	DisplaySolutionInTextBox(solved, mazeInfo->Maze, solution,mazeInfo->Height, mazeInfo->Width,mazeInfo->EntranceX, mazeInfo->EntranceY,mazeInfo->ExitX, mazeInfo->ExitY);

	//確認會work
	if (solved) {
		richTextBox1->Text = richTextBox1->Text->Replace("迷解決方案找到！", "隨機迷宮解決方案找到！");
	}
	else {
		richTextBox1->Text = richTextBox1->Text->Replace("無法找到解決方案！", "無法找到隨機解決方案！");
	}
}

     // ====================演算法 ====================

private: bool SolveMazeWithBacktracking(array<array<int>^>^ maze, array<array<int>^>^ solution,int x, int y, int exitX, int exitY) {
	// 去過或不能走
	if (x < 0 || x >= maze->Length ||y < 0 || y >= maze[0]->Length ||maze[x][y] != 0 || solution[x][y] != 0) {
		return false;
	}

	//現在位置=1=去過
	solution[x][y] = 1;

	//mouse動畫
	UpdateMazeDisplay(maze, solution, x, y);

	// 確認出口
	if (x == exitX && y == exitY) {
		solution[x][y] = 2; // 一定要走的路
		return true;
	}

	// (右, 下, 左, 上)
	int dx[] = { 0, 1, 0, -1 };
	int dy[] = { 1, 0, -1, 0 };

	for (int direction = 0; direction < 4; direction++) {
		int nextX = x + dx[direction];
		int nextY = y + dy[direction];

		if (SolveMazeWithBacktracking(maze, solution, nextX, nextY, exitX, exitY)) {
			//可走=路
			solution[x][y] = 2;
			return true;
		}
	}

	// 沒路了=往回走
	solution[x][y] = 0;
	UpdateMazeDisplay(maze, solution, x, y);
	return false;
}

private: bool SolveWithRandomWalk(array<array<int>^>^ maze, array<array<int>^>^ solution,int entranceX, int entranceY, int exitX, int exitY,int height, int width) {
	Random^ rand = gcnew Random();
	int x = entranceX;
	int y = entranceY;
	solution[x][y] = 2; //起點為路

	// 創建一個堆疊
	System::Collections::Generic::Stack<System::Drawing::Point>^ pathStack = gcnew System::Collections::Generic::Stack<System::Drawing::Point>();
	pathStack->Push(System::Drawing::Point(x, y));

	// 上、右、下、左
	array<int>^ dx = { -1, 0, 1, 0 };
	array<int>^ dy = { 0, 1, 0, -1 };

	// 繼續移動直到出口或沒有路
	while (pathStack->Count > 0 && !(x == exitX && y == exitY)) {
		List<int>^ availableMoves = gcnew List<int>();

		for (int i = 0; i < 4; i++) {
			int nextX = x + dx[i];
			int nextY = y + dy[i];

			// 檢查這個move是否valid
			if (nextX >= 0 && nextX < height && nextY >= 0 && nextY < width &&maze[nextX][nextY] == 0 && solution[nextX][nextY] == 0) {
				availableMoves->Add(i);
			}
		}

		if (availableMoves->Count > 0) {
			//從可用的移動方向中隨機選擇一個方向
			int moveIndex = rand->Next(availableMoves->Count);
			int direction = availableMoves[moveIndex];

			x += dx[direction];
			y += dy[direction];
			//路徑的一部分
			solution[x][y] = 2;
			pathStack->Push(System::Drawing::Point(x, y));

			UpdateMazeDisplay(maze, solution, x, y);
		}
		else {
			//回溯一步
			pathStack->Pop();
			// 如果堆疊中還有點，則更新當前位置為堆疊頂部
			if (pathStack->Count > 0) {
				System::Drawing::Point p = pathStack->Peek();
				x = p.X;
				y = p.Y;
			}
		}
	}

	//找到了出口返回 true
	return (x == exitX && y == exitY);
}

	   // ==========生成====================

	private: void GenerateNewMaze() {

		int height = Convert::ToInt32(this->textBox1->Text);
		int width = Convert::ToInt32(this->textBox2->Text);
		String^ entrance = this->textBox4->Text;
		String^ exit = this->textBox3->Text;

		//生成迷宮
		String^ mazeText = GeneratePrimMaze(height, width, entrance, exit);
		this->richTextBox1->Text = mazeText;

		UpdateDataGridView(mazeText);
	}

private: String^ GeneratePrimMaze(int height, int width, String^ entranceStr, String^ exitStr) {
	// 初始化迷宮，設置為牆
	array<array<int>^>^ maze = gcnew array<array<int>^>(height);
	for (int i = 0; i < height; i++) {
		maze[i] = gcnew array<int>(width);
		for (int j = 0; j < width; j++) {
			maze[i][j] = 1; // 1=牆
		}
	}

	//try {
		array<String^>^ entranceCoords = entranceStr->Split(',');
		int entranceX = Convert::ToInt32(entranceCoords[0]->Trim());
		int entranceY = Convert::ToInt32(entranceCoords[1]->Trim());
		array<String^>^ exitCoords = exitStr->Split(',');
		int exitX = Convert::ToInt32(exitCoords[0]->Trim());
		int exitY = Convert::ToInt32(exitCoords[1]->Trim());

		//確保座標在迷宮範圍內
		if (entranceX < 0 || entranceX >= height || entranceY < 0 || entranceY >= width ||exitX < 0 || exitX >= height || exitY < 0 || exitY >= width) {
			return "入口或出口座標超出迷宮範圍！";
		}

		// 入口和出口標記為路徑
		maze[entranceX][entranceY] = 0;
		maze[exitX][exitY] = 0;

		Random^ rand = gcnew Random();

		int startX = entranceX;
		int startY = entranceY;

		//  初始化邊界
		List<System::Drawing::Point>^ frontier = gcnew List<System::Drawing::Point>();
		AddFrontierCells(maze, frontier, startX, startY, height, width);

		// Main maze generation loop
		while (frontier->Count > 0) {
			//隨機選擇一個邊界單元格
			int index = rand->Next(frontier->Count);
			System::Drawing::Point p = frontier[index];
			frontier->RemoveAt(index);

			//檢查是否可以在此處打開路徑
			if (maze[p.X][p.Y] == 1) {
				maze[p.X][p.Y] = 0;
				ConnectPathToMaze(maze, p.X, p.Y, rand, height, width);
				AddFrontierCells(maze, frontier, p.X, p.Y, height, width);
			}
		}

		// 確保出口連接到迷宮
		EnsureExitIsConnected(maze, exitX, exitY, height, width, rand);

		// 將迷宮轉換為字符串
		String^ mazeStr = "";
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				if (i == entranceX && j == entranceY) {
					mazeStr += "E "; 
				}
				else if (i == exitX && j == exitY) {
					mazeStr += "X ";
				}
				else {
					mazeStr += maze[i][j] == 1 ? "1 " : "0 ";
				}
			}
			mazeStr = mazeStr->TrimEnd(); //移除尾隨空格
			mazeStr += "\n";
		}

		return mazeStr->TrimEnd(); // Remove trailing newline
	//}
	//catch (Exception^ ex) {
	//	return "錯誤：" + ex->Message;
	//}
}

	   // ==================== HELPER FUNCTIONS ====================

private: ref class MazeInfo {
public:
	array<array<int>^>^ Maze;
	int Height;
	int Width;
	int EntranceX;
	int EntranceY;
	int ExitX;
	int ExitY;
	bool IsValid;

	MazeInfo() {
		IsValid = false;
	}
};

	private: MazeInfo^ ParseMazeFromText(String^ mazeText) {
		MazeInfo^ info = gcnew MazeInfo();
		array<String^>^ lines = mazeText->Split('\n');

		//計算非空行數以確定高度
		int height = 0;
		int width = 0;
		for each (String ^ line in lines) {
			if (!String::IsNullOrWhiteSpace(line)) {
				height++;
				if (height == 1) {
					width = line->Split(' ')->Length;
				}
			}
		}
		if (height == 0 || width == 0) {
			return info; // 無效的迷宮
		}
		// 創建迷宮
		array<array<int>^>^ maze = gcnew array<array<int>^>(height);
		int entranceX = -1, entranceY = -1;
		int exitX = -1, exitY = -1;

		int validLineCount = 0;
		for (int i = 0; i < lines->Length && validLineCount < height; i++) {
			if (!String::IsNullOrWhiteSpace(lines[i])) {
				maze[validLineCount] = gcnew array<int>(width);
				array<String^>^ cells = lines[i]->Split(' ');

				for (int j = 0; j < width && j < cells->Length; j++) {
					String^ cell = cells[j]->Trim();
					if (cell == "E") {
						maze[validLineCount][j] = 0; 
						entranceX = validLineCount;
						entranceY = j;
					}
					else if (cell == "X") {
						maze[validLineCount][j] = 0; 
						exitX = validLineCount;
						exitY = j;
					}
					else {
						maze[validLineCount][j] = Convert::ToInt32(cell);
					}
				}
				validLineCount++;
			}
		}
		
		info->Maze = maze;
		info->Height = height;
		info->Width = width;
		info->EntranceX = entranceX;
		info->EntranceY = entranceY;
		info->ExitX = exitX;
		info->ExitY = exitY;
		info->IsValid = true;

		return info;
	
	}

private: array<array<int>^>^ CreateEmptySolutionArray(int height, int width) {
	array<array<int>^>^ solution = gcnew array<array<int>^>(height);
	for (int i = 0; i < height; i++) {
		solution[i] = gcnew array<int>(width);
		for (int j = 0; j < width; j++) {
			solution[i][j] = 0;
		}
	}
	return solution;
}

private: void DisplaySolutionInTextBox(bool solved, array<array<int>^>^ maze, array<array<int>^>^ solution,int height, int width, int entranceX, int entranceY, int exitX, int exitY) {
	if (solved) {
		String^ solutionStr = "";
		for (int i = 0; i < height; i++) {
			for (int j = 0; j < width; j++) {
				if (i == entranceX && j == entranceY) {
					solutionStr += "E ";
				}
				else if (i == exitX && j == exitY) {
					solutionStr += "X ";
				}
				else if (solution[i][j] == 2) {
					solutionStr += "P "; // Path
				}
				else if (maze[i][j] == 1) {
					solutionStr += "1 "; // Wall
				}
				else {
					solutionStr += "0 "; // Open space
				}
			}
			solutionStr += "\n";
		}

		richTextBox1->Text = solutionStr;
		richTextBox1->AppendText("\n迷宮解決方案找到！");
	}
	else {
		richTextBox1->AppendText("\n無法找到解決方案！");
	}
}

	   // ==================== mouse===================

private: void InitializeGrid(int rows, int cols) {
	dataGridView1->RowCount = rows;
	dataGridView1->ColumnCount = cols;

	for (int i = 0; i < cols; i++) {
		dataGridView1->Columns[i]->Width = 30;
	}
	for (int i = 0; i < rows; i++) {
		dataGridView1->Rows[i]->Height = 30;
	}
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			dataGridView1->Rows[i]->Cells[j]->Style->BackColor = System::Drawing::Color::White;
		}
	}
	
}

private: void UpdateMazeDisplay(array<array<int>^>^ maze, array<array<int>^>^ solution, int currentX, int currentY) {
	Application::DoEvents();
	System::Threading::Thread::Sleep(1000 / (animationSpeed + 1));

	for (int i = 0; i < maze->Length; i++) {
		for (int j = 0; j < maze[0]->Length; j++) {
			if (i == currentX && j == currentY) {
				// 當前位置
				dataGridView1->Rows[i]->Cells[j]->Style->BackColor = System::Drawing::Color::Red;
			}
			else if (solution[i][j] == 2) {
				// 最終路徑
				dataGridView1->Rows[i]->Cells[j]->Style->BackColor = System::Drawing::Color::LightGreen;
			}
			else if (solution[i][j] == 1) {
				// 已訪
				dataGridView1->Rows[i]->Cells[j]->Style->BackColor = System::Drawing::Color::LightYellow;
			}
			else if (maze[i][j] == 1) {
				//牆
				dataGridView1->Rows[i]->Cells[j]->Style->BackColor = System::Drawing::Color::Black;
			}
			else {
				//空
				dataGridView1->Rows[i]->Cells[j]->Style->BackColor = System::Drawing::Color::White;
			}
		}
	}
}

private: void UpdateDataGridView(String^ mazeText) {
	array<String^>^ rows = mazeText->Split('\n');
	int rowCount = 0;

	// 計算有效行數
	for each (String ^ row in rows) {
		if (!String::IsNullOrWhiteSpace(row)) {
			rowCount++;
		}
	}

	if (rowCount == 0) {
		return; // 空迷宮
	}

	int colCount = rows[0]->Split(' ')->Length;

	dataGridView1->RowCount = rowCount;
	dataGridView1->ColumnCount = colCount;

	for (int i = 0; i < colCount; i++) {
		dataGridView1->Columns[i]->Width = 30;
	}
	for (int i = 0; i < rowCount; i++) {
		dataGridView1->Rows[i]->Height = 30;
	}

	int validRowIndex = 0;
	for (int i = 0; i < rows->Length && validRowIndex < rowCount; i++) {
		if (!String::IsNullOrWhiteSpace(rows[i])) {
			array<String^>^ cells = rows[i]->Trim()->Split(' ');

			for (int j = 0; j < colCount && j < cells->Length; j++) {
				dataGridView1->Rows[validRowIndex]->Cells[j]->Value = cells[j];

				// Color code cells
				if (cells[j] == "1") {
					dataGridView1->Rows[validRowIndex]->Cells[j]->Style->BackColor = System::Drawing::Color::Black; // Wall
				}
				else if (cells[j] == "0") {
					dataGridView1->Rows[validRowIndex]->Cells[j]->Style->BackColor = System::Drawing::Color::White; // Path
				}
				else if (cells[j] == "E") {
					dataGridView1->Rows[validRowIndex]->Cells[j]->Style->BackColor = System::Drawing::Color::Green; // Entrance
				}
				else if (cells[j] == "X") {
					dataGridView1->Rows[validRowIndex]->Cells[j]->Style->BackColor = System::Drawing::Color::Red; // Exit
				}
				else if (cells[j] == "P") {
					dataGridView1->Rows[validRowIndex]->Cells[j]->Style->BackColor = System::Drawing::Color::LightBlue; // Solution path
				}
			}
			validRowIndex++;
		}
	}
}

	   // ==================== FILE OPERATIONS ====================

private: void Save() {

	String^ mazeContent = this->richTextBox1->Text;
	System::IO::File::WriteAllText("maze.txt", mazeContent);
	//richTextBox1->AppendText("\n迷宮已保存到 maze.txt");

}

private: void Load() {
	richTextBox1->Clear();
	array<String^>^ mazeFiles = gcnew array<String^> { "maze.txt", "maze1.txt", "maze2.txt", "maze3.txt" };

	if (currentFileIndex < mazeFiles->Length) {
		String^ file = mazeFiles[currentFileIndex];
		if (System::IO::File::Exists(file)) {
			String^ mazeContent = System::IO::File::ReadAllText(file);
			this->richTextBox1->AppendText(mazeContent);
			//richTextBox1->AppendText("\n從 " + file + " 成功載入迷宮");
		}
		else {
			richTextBox1->AppendText("\n找不到檔案: " + file);
		}
		currentFileIndex++;
	}
	else {
		this->richTextBox1->AppendText("\n所有文件已加載完畢");
		currentFileIndex = 0; 
	}
}

	   // ==================== MAZE GENERATION HELPER FUNCTIONS ====================

private: void AddFrontierCells(array<array<int>^>^ maze, List<System::Drawing::Point>^ frontier,
	int x, int y, int height, int width) {
	// Add cells that are two steps away (potential frontier cells)
	array<int>^ dx = { -2, 2, 0, 0 };
	array<int>^ dy = { 0, 0, -2, 2 };

	for (int i = 0; i < 4; i++) {
		int nx = x + dx[i];
		int ny = y + dy[i];

		// Check if in bounds and is a wall
		if (nx >= 0 && nx < height && ny >= 0 && ny < width && maze[nx][ny] == 1) {
			frontier->Add(System::Drawing::Point(nx, ny));
		}
	}
}

private: void ConnectPathToMaze(array<array<int>^>^ maze, int x, int y,
	Random^ rand, int height, int width) {
	// Directions to connect to existing paths
	array<int>^ dx = { -2, 2, 0, 0 };
	array<int>^ dy = { 0, 0, -2, 2 };

	// Shuffle directions for randomness
	array<int>^ directions = { 0, 1, 2, 3 };
	ShuffleDirections(directions, rand);

	for (int i = 0; i < 4; i++) {
		int nx = x + dx[directions[i]];
		int ny = y + dy[directions[i]];

		// Check if in bounds and is a path
		if (nx >= 0 && nx < height && ny >= 0 && ny < width && maze[nx][ny] == 0) {
			// Open wall between cells
			int wallX = (x + nx) / 2;
			int wallY = (y + ny) / 2;
			maze[wallX][wallY] = 0;
			break;
		}
	}
}

private: void ShuffleDirections(array<int>^ array, Random^ rand) {
	// Fisher-Yates shuffle algorithm
	for (int i = array->Length - 1; i > 0; i--) {
		int j = rand->Next(i + 1);
		int temp = array[i];
		array[i] = array[j];
		array[j] = temp;
	}
}

private: void EnsureExitIsConnected(array<array<int>^>^ maze, int exitX, int exitY,
	int height, int width, Random^ rand) {
	// Check if exit has adjacent path
	array<int>^ dx = { -1, 1, 0, 0 };
	array<int>^ dy = { 0, 0, -1, 1 };

	bool hasAdjacentPath = false;
	for (int i = 0; i < 4; i++) {
		int nx = exitX + dx[i];
		int ny = exitY + dy[i];

		if (nx >= 0 && nx < height && ny >= 0 && ny < width && maze[nx][ny] == 0) {
			hasAdjacentPath = true;
			break;
		}
	}

	// If exit is isolated, connect it to a random adjacent cell
	if (!hasAdjacentPath) {
		// Try all directions in random order
		array<int>^ directions = { 0, 1, 2, 3 };
		ShuffleDirections(directions, rand);

		for (int i = 0; i < 4; i++) {
			int nx = exitX + dx[directions[i]];
			int ny = exitY + dy[directions[i]];

			if (nx >= 0 && nx < height && ny >= 0 && ny < width) {
				maze[nx][ny] = 0; // Open path
				break;
			}
		}
	}
}

};
}
